export PATH=/usr/local/bin:$PATH

# Git status bash prompt
#
# In addition to printing the current working directory, this prompt will
# show a number of things if you are in a git repository:
# - The current branch you are in
# - Whether there are untracked files in the repository (there will be an
#   asterisk after the branch nome if there are)
# - Whether there are any unmerged/unstaged/staged changes or if the directory
#   is clean. See below for the colors that will be used, and change them if
#   you'd like.

# Storing these color codes for later use
txtblk='\033[0;30m' # Black - Regular
txtred='\033[0;31m' # Red
txtgrn='\033[0;32m' # Green
txtylw='\033[0;33m' # Yellow
txtblu='\033[0;34m' # Blue
txtpur='\033[0;35m' # Purple
txtcyn='\033[0;36m' # Cyan
bldblk='\033[1;30m' # Black - Bold
bldred='\033[1;31m' # Red
bldgrn='\033[1;32m' # Green
bldylw='\033[1;33m' # Yellow
bldblu='\033[1;34m' # Blue
bldpur='\033[1;35m' # Purple
bldcyn='\033[1;36m' # Cyan

# Set color for the directory listing in the prompt
dir_listing_color=$bldgrn

# Set colors for different repository states
unmerged_color=$bldpur
unstaged_color=$bldred
staged_color=$bldylw
clean_color=$bldgrn

function git_color {
  git_status=`git status 2> /dev/null`

  if [ -n "`echo $git_status | grep "Unmerged paths:"`" ]; then
    echo -e $unmerged_color
  elif [ -n "`echo $git_status | grep "Changes not staged for commit:"`" ]; then
    echo -e $unstaged_color
  elif [ -n "`echo $git_status | grep "Changes to be committed:"`" ]; then
    echo -e $staged_color
  else
    echo -e $clean_color
  fi
}

function git_branch {
  git_branch=`git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
  if [ -n  "`git status 2> /dev/null | grep "Untracked files:"`" ]; then
    untracked="*"
  fi
  if [ "`expr "$git_branch" : '.*'`" -gt "0" ]; then
    echo \($git_branch$untracked\)
  fi
}

function git-open-branch() {
  remote_url=$(git config --get remote.origin.url)
  if [[ -z "$remote_url" ]]; then
    echo "No remote origin found."
    return 1
  fi

  current_branch=$(git rev-parse --abbrev-ref HEAD)
  if [[ -z "$current_branch" ]]; then
    echo "Could not determine current branch."
    return 1
  fi

  # Convert SSH URL to HTTPS if needed
  if [[ "$remote_url" =~ ^git@github.com:(.*)\.git$ ]]; then
    repo_path="${BASH_REMATCH[1]}"
    web_url="https://github.com/$repo_path/tree/$current_branch"
  elif [[ "$remote_url" =~ ^https://github.com/(.*)\.git$ ]]; then
    repo_path="${BASH_REMATCH[1]}"
    web_url="https://github.com/$repo_path/tree/$current_branch"
  else
    echo "Unsupported remote URL: $remote_url"
    return 1
  fi

  echo "Opening $web_url"
  open "$web_url"  # macOS
  # For Linux use: xdg-open "$web_url"
}

function git-open-pr() {
  if ! git rev-parse --is-inside-work-tree &>/dev/null; then
    echo "Not inside a Git repository."
    return 1
  fi

  # Ensure gh CLI is installed
  if ! command -v gh &>/dev/null; then
    echo "GitHub CLI (gh) is not installed. Install it with \`brew install gh\`"
    return 1
  fi

  # Get the current branch name
  branch=$(git symbolic-ref --short HEAD)

  # Check if a PR already exists
  pr_url=$(gh pr view "$branch" --json url --jq .url 2>/dev/null)

  if [[ -n "$pr_url" ]]; then
    echo "Opening existing PR: $pr_url"
    open "$pr_url"  # macOS
    # xdg-open "$pr_url" # Linux
  else
    echo "No PR found. Opening new PR creation page..."
    gh pr create --web
  fi
}

PS1='ðŸ”¥  \[`echo -e $dir_listing_color`\]\W \[`git_color`\]`git_branch`\[\e[0m\] '
PS2="> "
